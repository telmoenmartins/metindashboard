import{Q as s}from"./index-CoOuRCJZ.js";function u(t){const e=new Date,a=new Date(t)-e,n=1e3*60,o=a/n,i=Math.floor(o/60),d=Math.floor(o%60);return`Faltam ${i} horas e ${d} minutos para dar reset`}function m(t){return new Date(t).toLocaleTimeString("pt-PT",{year:"numeric",month:"numeric",day:"numeric",hour:"2-digit",minute:"2-digit"})}function l(t){const e=new Date,r=new Date(t);return e>=r}function h(t,e,r){const a=new Date;return a.setDate(a.getDate()+t),a.setHours(a.getHours()+e),a.setMinutes(a.getMinutes()+r),a}const c={getTimeLeftInHoursAndMinutes:u,formatToReadableDate:m,dateExpired:l,setDateExpired:h};async function p(t){try{const{data:e}=await s.supabase.from("shards").select().eq("characted_id",t).limit(1);return await _(e[0])}catch(e){console.error("Error on shards.getById",e)}}async function y(t){const e=new Date;e.setHours(23),e.setMinutes(59),e.setSeconds(59);try{const{data:r}=await s.supabase.from("shards").update({completed:!0,completed_at:new Date,expires_at:e}).eq("characted_id",t).select();return r[0]}catch(r){console.error("Error on shards.setAsCompleted",r)}}async function f(t){const e=new Date;e.setHours(23),e.setMinutes(59),e.setSeconds(59);try{const{data:r}=await s.supabase.from("shards").update({completed:!1,expires_at:e}).eq("id",t).select();return r[0]}catch(r){console.error("Error on shards.setAsCompleted",r)}}async function _(t){return c.dateExpired(t.expires_at)?await f(t.id):t}async function g(t){try{await s.supabase.from("shards").insert({characted_id:t})}catch(e){console.error("Error on shards.create",e)}}const w={getById:p,setAsCompleted:y,create:g};async function b(t){try{const{data:e}=await s.supabase.from("biologist").select().eq("character_id",t).limit(1);return e[0].expires_at?e[0]:await E(e[0])}catch(e){console.error("Error on biologist.getById",e)}}async function x(t){const e=new Date;e.setHours(e.getHours()+22);try{const{data:r}=await s.supabase.from("biologist").update({completed:!0,completed_at:new Date,expires_at:e}).eq("character_id",t)}catch(r){console.error("Error on biologist.setAsCompleted",r)}}async function I(t){try{const{data:e}=await s.supabase.from("biologist").update({completed:!1,expires_at:null}).eq("character_id",t).select();return e[0]}catch(e){console.error("Error on biologist.setAsCompleted",e)}}async function D(t){try{await s.supabase.from("biologist").insert({character_id:t})}catch(e){console.error("Error on biologist.create",e)}}async function E(t){return c.dateExpired(t.expires_at)?await I(t.character_id):t}const A={getById:b,setAsCompleted:x,create:D};async function $(t){try{const{data:e}=await s.supabase.from("characters").select("id,name").eq("account_id",t);return e}catch(e){console.error("Error on characters.getById",e)}}async function q(){try{const{data:t}=await s.supabase.from("characters").select();return t}catch(t){console.error("Error on character.getAll",t)}}async function B(t,e){try{const{data:r}=await s.supabase.from("characters").insert({name:t,account_id:e}).select(),a=r[0].id;return await w.create(a),await A.create(a),a}catch(r){console.error("Error on characters.create",r)}}async function M(t){try{const{data:e}=await s.supabase.from("characters").select("name").eq("id",t);return e[0].name}catch(e){console.error("character.getCharNameById",e)}}async function C(t){try{await s.supabase.from("characters").delete().eq("id",t)}catch(e){console.error("Error on character.delete",e)}}async function H(t,e,r){try{const{data:a}=await s.supabase.from("items_character").insert({character_id:e,item_id:t,expires_at:r})}catch(a){console.error("character.addItem",a)}}async function T(t){try{await s.supabase.from("items_character").delete().eq("id",t)}catch(e){console.error("character.removeItem",e)}}async function L(){try{const t=[],{data:e}=await s.supabase.from("items_character").select(`
                                    items (
                                    id, 
                                    name,
                                    items_duration_id (name,days),
                                    item_type (image)
                                    ),
                                    character_id (name),
                                    expires_at,
                                    id
                                `).order("expires_at",{ascending:!0});return e.forEach(r=>{t.push({id:r.id,expiresAt:r.expires_at,itemId:r.items.id,image:r.items.item_type.image,durationDays:r.items.items_duration_id.days,name:`${r.items.name} - ${r.items.items_duration_id.name}`,characterName:r.character_id.name})}),t}catch(t){console.error("characters.getItems",t)}}async function N(t){try{const e=[],{data:r}=await s.supabase.from("items_character").select(`
                                    items (
                                    id, 
                                    name,
                                    items_duration_id (name,days),
                                    item_type (image)
                                    ),
                                    character_id (name),
                                    expires_at,
                                    id
                                `).eq("character_id",t).order("expires_at",{ascending:!0});return r.forEach(a=>{e.push({id:a.id,expiresAt:a.expires_at,itemId:a.items.id,image:a.items.item_type.image,durationDays:a.items.items_duration_id.days,name:`${a.items.name} - ${a.items.items_duration_id.name}`,characterName:a.character_id.name})}),e}catch(e){console.error("characters.getItems",e)}}const S={getById:$,create:B,remove:C,getAll:q,getCharNameById:M,addItem:H,getItems:N,removeItem:T,getAllItems:L};export{A as b,S as c,c as d,w as s};
